generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                 Int        @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String     @unique
  workEmail          String     @unique
  dateOfBirth        DateTime
  gender             String
  nationality        String
  phoneNumber        String     @unique
  residentialAddress String
  emergencyContact   Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  education          Education?
}

model Education {
  id                  Int     @id @default(autoincrement())
  memberId            Int     @unique
  highestLevel        String
  institutionName     String
  fieldOfStudy        String
  otherCertifications String?
  member              Member  @relation(fields: [memberId], references: [id])
}

model Application {
  id            Int         @id @default(autoincrement())
  applicationId String      @unique
  status        String      @default("pending")
  submittedAt   DateTime    @default(now())
  programId     Int         @unique
  personalId    Int         @unique
  farmId        Int         @unique
  grantId       Int         @unique
  trainingId    Int         @unique
  motivationId  Int         @unique
  declarationId Int         @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  declaration   Declaration @relation(fields: [declarationId], references: [id])
  farm          Farm        @relation(fields: [farmId], references: [id])
  grant         Grant       @relation(fields: [grantId], references: [id])
  motivation    Motivation  @relation(fields: [motivationId], references: [id])
  personal      Personal    @relation(fields: [personalId], references: [id])
  program       Program     @relation(fields: [programId], references: [id])
  training      Training    @relation(fields: [trainingId], references: [id])
}

model Program {
  id               Int          @id @default(autoincrement())
  category         String
  previousTraining Boolean
  trainingId       String?
  application      Application?
}

model Personal {
  id          Int          @id @default(autoincrement())
  fullName    String
  email       String
  phoneNumber String
  address     String
  gender      String
  dateOfBirth DateTime
  application Application?
}

model Farm {
  id          Int          @id @default(autoincrement())
  location    String
  size        Float
  type        String
  practices   String
  challenges  String
  application Application?
}

model Grant {
  id                     Int          @id @default(autoincrement())
  outcomes               String
  budgetFile             String
  budgetFileMimeType     String?
  budgetFileOriginalName String?
  budgetFileSize         Int?
  application            Application?
}

model Training {
  id          Int          @id @default(autoincrement())
  preference  String
  application Application?
}

model Motivation {
  id                       Int          @id @default(autoincrement())
  statement                String
  implementation           String
  identityFile             String
  identityFileMimeType     String?
  identityFileOriginalName String?
  identityFileSize         Int?
  application              Application?
}

model Declaration {
  id          Int          @id @default(autoincrement())
  agreed      Boolean
  officerName String
  application Application?
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
